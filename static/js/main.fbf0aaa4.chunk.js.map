{"version":3,"sources":["pages/AsyncAwait.js","pages/ConsoleTips.js","pages/EventLoop.js","pages/InterviewQuestions.js","pages/ReactArchitecture.js","App.js","index.js"],"names":["AsyncAwait","react_default","a","createElement","className","href","react_highlight_default","ConsoleTips","EventLoop","src","frameborder","allow","allowfullscreen","InterviewQuestions","ReactArchitecture","App","react_router_dom","to","react_router","exact","path","component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fbf0aaa4.chunk.js","sourcesContent":["import React from 'react'\nimport Highlight from 'react-highlight'\n\n\nconst AsyncAwait = () => {\n  return (\n    <div className=\"w-full mb-10 w-750\">\n      <h1 className=\"text-bold text-4xl\"> Async & Await</h1>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> The word “async” before a function means one simple thing: a function always returns a promise. Even If a function actually returns a non-promise value, prepending the function definition with the “async” keyword directs JavaScript to automatically wrap that value in a resolved promise. The keyword await makes JavaScript wait until that promise settles and returns its result. Await literally makes JavaScript wait until the promise settles, and then go on with the result. That doesn’t cost any CPU resources, because the engine can do other jobs meanwhile: execute other scripts, handle events etc. More info <a href=\"https://javascript.info/async-await\">here</a></p>\n\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-hidden\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const getFruit = async(name) => {\n              const fruits = {\n                pineapple: 'pineapple',\n                banana: 'banana'\n              }\n\n              await delay(1000)\n              return fruits[name]\n            }\n\n\n            const makeSmoothie = async() => {\n              // we can have promise resolve to the value of a variable\n\n              // Await is like saying \"pause the execution of this function until\n              // the getFruit promise resolves to a value in which point we can use\n              // it as the variable a and then move onto the next line of code.\n\n              // in this case, you only need to await one thing after another if the\n              // second value is dependant on the first value, like need userID first before\n              //doing the next call. Doing it this way, however, will take too long.\n              const a = await getFruit('pineapple')\n              const b = await getFruit('banana')\n\n              //instead of waiting on individual promises, add all promises to an array and then await the promise.all call\n              const a = getFruit('pineapple')\n              const b = getFruit('banana')\n              const smoothie = await Promise.all([a,b])\n\n              return smoothie\n            }\n            makeSmoothie().then(console.log)\n          `}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\n\n\nexport default AsyncAwait\n","import React from 'react'\nimport Highlight from 'react-highlight'\n\n\nconst ConsoleTips = () => {\n\n  return (\n    <div className=\"w-full mb-10 w-750\">\n      <h1 className=\"text-bold text-4xl\"> Console Tips</h1>\n      <h3 className=\"mt-5 font-semibold text-dolphin-blue\"> Tip for logging multiple variables at once. See more tips at <a href=\"https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA\">Fireship</a></h3>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-hidden\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const foo = { name: 'tom', age: 30, nervous: true },\n            const bar = { name: 'harry', age: 23, nervous: true },\n            const baz = { name: 'kelsey', age: 32, nervous: false },\n\n            console.log({ foo, bar, baz })\n            // { foo: {...}, bar: {...}, baz: {...}}\n\n            // add css style to console log\n            console.log('%c colors', 'color: orange; font-size: 23px', bar)\n\n            // log values into a table\n            console.table([foo, bar, baz ])\n\n            // stack trace logs\n            const deleteMe = () => console.trace('bye bye database')\n            deleteMe()\n            // bye bye database\n            // deleteMe @fileName.js:35 (function defined on this line)\n            // (anonymous) @fileName.js:37 (function called on this line)\n          `}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\n\n\nexport default ConsoleTips\n","import React from 'react'\nimport Highlight from 'react-highlight'\n\n\nconst EventLoop = () => {\n\n  return (\n    <div className=\"w-full mb-10 w-750\">\n      <h1 className=\"text-bold text-4xl\"> Event Loop</h1>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Web pages have a main thread (it's where javascript, rendering and the DOM lives). Humans don't really have a main thread -- we can multi-task and wave arms and legs arouond at the same time. The only time we are single-threaded is when we sneeze. We don't want to write code that is like a sneeze. We spawn a whole series of threads off of the main thread. Once they're done with their task they go back to the main thread to give it that information.</p>\n\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Javascript is single threaded which means it's one thread == one call stack == one thing at a time. </p>\n\n      <h2 className=\"mt-12 mb-3 border-solid border-b pb-2\"> Task Queues </h2>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> When we queue a task, the event loop takes a detour (detour is where tasks happen). Browser tells event loop \"Hey, I have a job for you!\", and event loop says \"Okay, add it to my to do list and I'll get around to it\". If it's a macrotask (like settimeout or setinterval) it will be executed on the next event loop. It it's a microtask like a promise then it will be called back before the start of the next event loop.</p>\n\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-hidden\">\n        <Highlight className='javascript ml--100'>\n          {`\n            // gets logged right away since it's running on the main thread\n            console.log('synchronous 1')\n\n            // this gets queued for a future task\n            setTimeout(_ => console.log('timeout 2'), 0)\n\n            // promise gets tasked to run in the microtask queue\n            Promise.resolve().then(_ => console.log('Promise 3'))\n\n            // gets executed right away\n            console.log('synchronous 4')\n\n            // RESULTS (promise will get executed first because of the priority of the microtask queue)\n            // synchronous 1\n            // synchronous 4\n            // promise 3\n            // timeout 2\n          `}\n        </Highlight>\n      </div>\n\n      <div className=\"video-container mt-8\">\n        <iframe className=\"iframe\" src=\"https://www.youtube.com/embed/8aGhZQkoFbQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n      </div>\n    </div>\n  )\n}\n\n\nexport default EventLoop\n","import React from 'react'\nimport Highlight from 'react-highlight'\n\n\nconst InterviewQuestions = () => {\n\n  return (\n    <div className=\"w-full mb-10 w-750\">\n      <h1 className=\"text-bold text-4xl\"> Interview Questions</h1>\n      <h2 className=\"mt-8 mb-3 border-solid border-b pb-2\"> Difference between \"Var\" and \"Let\" </h2>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Var has always been around. Let was introduced to javascript in ES6. Let won't work on old browsers. \"Let\" has block scope, \"var\" has function scope so it dies at the end of the function it's defined in. \"Var\" gets hoisted to the top of its function.</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-hidden\">\n        <Highlight className='javascript ml--100'>\n          {`\n            // EXAMPLE 1\n            let x = function() {\n              if( true ) {\n                var v = 2\n                var l = 1\n              }\n              // this will log v because var exists outside of the block\n              console.log(v)\n              // will not log l because let doesn't exist outside of the block\n              console.log(l)\n            }\n\n            x()\n\n            // EXAMPLE 2\n            let x = function() {\n              if( true ) {\n                // this will log v because var gets hoisted (can call before defined)\n                console.log(v)\n                // will not log l because it's not hoisted\n                console.log(l)\n                var v = 2\n                var l = 1\n              }\n            }\n\n            x()\n          `}\n        </Highlight>\n      </div>\n\n      <h2 className=\"mt-8 mb-3 border-solid border-b pb-2\"> Difference between \"Const\" and \"Let\" </h2>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> You can't re-assign value to const but you can modify an object or array, let will let you.</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-hidden\">\n        <Highlight className='javascript ml--100'>\n          {`\n            // LET\n            let l = 1\n            l = 2\n            // this works\n            console.log(l)\n\n            // CONST\n            const c = 1\n            c = 2\n            // this doesn't work because I'm re-assigning a new value\n            console.log(c)\n\n            // CONST modify\n            const c = [1,2]\n            c.push(3)\n            console.log(c)\n            // [1,2,3]\n          `}\n        </Highlight>\n      </div>\n\n      <h2 className=\"mt-8 mb-3 border-solid border-b pb-2\"> Difference between \"Null\" and \"Undefined\" </h2>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> They both equal an empty value. If you assign a value that isn't equal to anything javascript automatically assigned undefined. typeOf undefined is undefined, typeOf null is object. </p>\n    </div>\n  )\n}\n\n\nexport default InterviewQuestions\n","import React from 'react'\nimport Highlight from 'react-highlight'\n\nconst ReactArchitecture = () => {\n\n  return (\n    <div className=\"w-full mb-10 w-750\">\n      <h1 className=\"font-bold text-4xl\"> React Architecture</h1>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> This \"Clean\" architecture follows the onion architecture principle, and uses dependency injection to maintain modularity of code. The innermost layer is the component, followed by presenters, services, and finally coordinators as the outermost layer. </p>\n\n      <h3 className=\"mt-5 font-semibold text-dolphin-blue\"> Folder Structure </h3>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-hidden\">\n        <Highlight className='javascript ml--100'>\n          {`\n            src/\n              behavior/\n                coordinators/\n                presenters/\n                services/\n              state/\n                actions/\n                reducers/\n              view/\n                components/\n                containers/\n          `}\n        </Highlight>\n      </div>\n      { /* BEHAVIOR BREAKDOWN */}\n      <h2 className=\"mt-12 mb-3 border-solid border-b pb-2\"> Behavior </h2>\n      <h3 className=\"font-semibold text-dolphin-blue\"> Coordinators </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Coordinators execute one use case (such as saving an order) and calls a series of single responsibility services to do this. All API calls will be made in coordinators using the rest service.</p>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> The following is a typical API call use case</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const CreateResource = ({ ResourceService, RestService, pRequestResource, pResponseResource }) => async data => {\n              // massage request data\n              const req = pRequestResource( data )\n\n              // make api call\n              let resource = await RestService.post( /api/resource_endpoint, req )\n\n              // massasge response data\n              resource = pResponseResource( resource )\n\n              // a resource redux service that saves the resource into redux state, triggering a rerender of any components that use it\n              ResourceService.setResource( resource )\n            }\n          `}\n          </Highlight>\n      </div>\n\n      <h3 className=\"mt-10 font-semibold text-dolphin-blue\"> Presenters </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Presenters massage the data that comes to and from the API request/response. For example, a presenter changes Javascript's camelcase code syntax into snakecase before sending it to the Rails API.</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const pRequestResource = ({ chefPrice, eventDate, name, price }) => {\n              return {\n                chef_price: Number( chefPrice.replace( /[$,]/g, ''))\n                date: Moment( eventDate, 'MM/DD/YYYY' ).format()\n                name,\n                price: Number( price.replace( /[$,]/g, '' )),\n              }\n            }\n\n            const pResponseResource = ({ chef_price, created_at, date, name, price }) => {\n              return {\n                chefPrice: Number( chef_price.replace( /[$,]/g, '' )).toFixed( 2 ),\n                createdAt: Moment( created_at ),\n                date: Moment( date ),\n                name,\n                price: Number( price.replace( /[$,]/g, '' )).toFixed( 2 ),\n              }\n            }\n          `}\n        </Highlight>\n      </div>\n\n      <h3 className=\"mt-10 font-semibold text-dolphin-blue\"> Services </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> The three areas that services generally cover in our codebase are: Api calls, redux state, and business logic.</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            // an API calling service\n            class RestService extends BaseService {\n              post = ( uri, data ) => {\n                return axios.request({ method: 'post', url: uri, data })\n              }\n            }\n          `}\n        </Highlight>\n      </div>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Here is a redux method on a service. All services are subclasses of the base service which are all instantiated with redux dispatch and getState</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            class ResourceService extends BaseService {\n              setResource = resource => {\n                this.dispatch( actions.setResource( resource ))\n              }\n            }\n          `}\n        </Highlight>\n      </div>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> There can also be business logic methods on services that can be called from coordinators or components. </p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            class ResourceService extends BaseService {\n              ......\n\n              calculateTax = ({ items, serviceFee, foodTaxRate, serviceTaxRate }) => {\n                const foodTotal = items.reduce(( total, item ) => {\n                  return total + item.quantity * item.price\n                }, 0 )\n\n                return foodTotal * foodTaxRate + serviceFee * serviceTaxRate\n              }\n            }\n          `}\n        </Highlight>\n      </div>\n\n\n      { /* STATE BREAKDOWN */}\n      <h2 className=\"mt-12 mb-3 border-solid border-b pb-2\"> State </h2>\n      <h3 className=\"font-semibold text-dolphin-blue\"> Actions </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\">Actions are very simple, containing no logic, and just pass information to redux. Actions tell the reducer the possible actions you can take to change a speficic state. In this case, we will be telling the reducer to set and return our resource state when it switches through the possible actions and stops at SET_RESOURCE (the action we have sent).</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const SET_RESOURCE = 'SET_RESOURCE'\n            const setResource = resource => ({ type: SET_RESOURCE, resource })\n          `}\n        </Highlight>\n      </div>\n\n      <h3 className=\"mt-10 font-semibold text-dolphin-blue\"> Reducers </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\">Logic is avoided in reducers. It just stores and returns the state depending on what action we tell it to take. If no action is given, it will do nothing and return the stored state.</p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const resource = ( state, action ) => {\n              switch( action.type ) {\n              case SET_RESOURCE:\n                return action.resource\n              default:\n                return state\n              }\n            }\n          `}\n        </Highlight>\n      </div>\n\n      { /* VIEW BREAKDOWN */}\n      <h2 className=\"mt-12 mb-3 border-solid border-b pb-2\"> View </h2>\n      <h3 className=\"font-semibold text-dolphin-blue\"> Components </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Components are dumb and do not perform any logic. Components are only concerned with how things look and are not aware of the Redux state. They get their data from props and can trigger callbacks passed to them via props (from a container or parent component). Any business logic should be injected as a prop method. In a clean architure, the component should ideally accept primitively-typed components, but we're lazy and just pass in objects of PropType shape. </p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n\n          {`\n            class ResourcePage extends Component {\n              state = {\n                chefPrice: ''\n                eventDate: ''\n                name: '',\n                price: '',\n              }\n\n              onChange = field => e => {\n                this.setState({ [field]: e.target.value })\n              }\n\n              onCreateResource = () => {\n                const { chefPrice, eventDate, name, price } = this.state\n                this.props.createResource( this.state )\n              }\n\n              render() {\n                const { createResource, resource } = this.props\n                const { name } = this.state\n\n                return (\n                  <div>\n                    <h1>{ resource.name }</h1>\n\n                    <input type=\"text\" value={ chefPrice } onInput={ this.onChange( 'chefPrice' ) }>\n                    <input type=\"text\" value={ eventDate } onInput={ this.onChange( 'eventDate' ) }>\n                    <input type=\"text\" value={ name } onInput={ this.onChange( 'name' ) }>\n                    <input type=\"text\" value={ price } onInput={ this.onChange( 'price' ) }>\n                    <button onClick={ this.onCreateResource }>Create Another Resource</button>\n                  </div>\n                )\n              }\n            }\n\n\n            ResourcePage.propTypes = {\n              resource: PropType.object,  // this should ideally be at least PropType.shape({ ... }), but we have become a bit lazy with it. The schema can be found in the presenter anyway\n\n              createResource: PropType.func,\n            }\n          `}\n        </Highlight>\n      </div>\n\n      <h3 className=\"mt-10 font-semibold text-dolphin-blue\"> Containers </h3>\n      <p className=\"mt-2 text-dolphin-blue font-regular leading-normal\"> Containers are a separate file that connect components to the redux store. They receive Redux state updates, inject it into a component as props and dispatch actions. </p>\n      <div className=\"bg-light-gray mt-3 rounded-sm w-full overflow-x-scroll\">\n        <Highlight className='javascript ml--100'>\n          {`\n            const mapStateToProps = state => {\n              return {\n                resource: state.resource,\n              }\n            }\n\n\n            const mapDispatchToProps = dispatch => {\n              return {\n                createResource: data => {\n                  const { CreateResource } = coordinators\n                  const { ResourceService, RestService } = services\n                  const { pRequestResource, pResponseResource } = presenters\n\n                  return CreateResource({ ResourceService, RestService, pRequestResource, pResponseResource })\n                }\n              }\n            }\n\n\n            export default connect( mapStateToProps, mapDispatchToProps )( ResourcePage )\n          `}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\n\n\nexport default ReactArchitecture\n","import React from 'react'\nimport { Route, Link } from 'react-router-dom'\n\nimport AsyncAwait from './pages/AsyncAwait'\nimport ConsoleTips from './pages/ConsoleTips'\nimport EventLoop from './pages/EventLoop'\nimport InterviewQuestions from './pages/InterviewQuestions'\nimport ReactArchitecture from './pages/ReactArchitecture'\n\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"text-center gradient p-6\">\n        <h1 className=\"text-white mt-5 text-4xl font-bold\"> Web Guide & Tips</h1>\n      </header>\n      <div className=\"flex items-center justify-center\">\n        <div className=\"w-1000 flex mt-12\">\n          <nav className=\"flex flex-col w-250 min-w-250\">\n            <p className=\"font-bold mb-3\"> JAVASCRIPT </p>\n            <Link to=\"/async-await\" className=\"font-regular text-dolphin-blue mb-2 no-underline hover:underline\">Async Await</Link>\n            <Link to=\"/console-tips\" className=\"font-regular text-dolphin-blue mb-2 no-underline hover:underline\">Console Tips</Link>\n            <Link to=\"/event-loop\" className=\"font-regular text-dolphin-blue mb-2 no-underline hover:underline\">Event Loop</Link>\n            <Link to=\"/interview-questions\" className=\"font-regular text-dolphin-blue mb-2 no-underline hover:underline\">Interview Questions</Link>\n            <Link to=\"/\" className=\"font-regular text-dolphin-blue mb-2 no-underline hover:underline\">React Architecture</Link>\n            <p className=\"font-bold mt-3 mb-3\"> CSS </p>\n          </nav>\n          {/* Add Route for Each Page */}\n          <Route exact path=\"/\" component={ ReactArchitecture } />\n          <Route path=\"/async-await\" component={ AsyncAwait } />\n          <Route path=\"/console-tips\" component={ ConsoleTips } />\n          <Route path=\"/event-loop\" component={ EventLoop } />\n          <Route exact path=\"/interview-questions\" component={ InterviewQuestions } />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\n\nimport './res/css/tailwind.css'\n\nimport App from './App'\n\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\ndocument.getElementById('root'))\n"],"sourceRoot":""}